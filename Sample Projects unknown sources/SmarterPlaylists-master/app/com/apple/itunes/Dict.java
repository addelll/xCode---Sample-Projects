//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.12.19 at 10:09:50 AM CST 
//


package com.apple.itunes;

import java.math.BigInteger;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice maxOccurs="unbounded" minOccurs="0">
 *         &lt;element ref="{}dict"/>
 *         &lt;element ref="{}array"/>
 *         &lt;element ref="{}data"/>
 *         &lt;element ref="{}date"/>
 *         &lt;element ref="{}false"/>
 *         &lt;element ref="{}integer"/>
 *         &lt;element ref="{}key"/>
 *         &lt;element ref="{}rating"/>
 *         &lt;element ref="{}string"/>
 *         &lt;element ref="{}true"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "dictOrArrayOrData"
})
@XmlRootElement(name = "dict")
public class Dict {

    @XmlElementRefs({
        @XmlElementRef(name = "dict", type = Dict.class),
        @XmlElementRef(name = "false", type = False.class),
        @XmlElementRef(name = "true", type = True.class),
        @XmlElementRef(name = "date", type = JAXBElement.class),
        @XmlElementRef(name = "integer", type = JAXBElement.class),
        @XmlElementRef(name = "rating", type = JAXBElement.class),
        @XmlElementRef(name = "string", type = JAXBElement.class),
        @XmlElementRef(name = "array", type = Array.class),
        @XmlElementRef(name = "data", type = JAXBElement.class),
        @XmlElementRef(name = "key", type = JAXBElement.class)
    })
    protected List<Object> dictOrArrayOrData;

    /**
     * Gets the value of the dictOrArrayOrData property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dictOrArrayOrData property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDictOrArrayOrData().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Dict }
     * {@link True }
     * {@link False }
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link BigInteger }{@code >}
     * {@link JAXBElement }{@code <}{@link BigInteger }{@code >}
     * {@link Array }
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * {@link JAXBElement }{@code <}{@link byte[]}{@code >}
     * {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * 
     */
    public List<Object> getDictOrArrayOrData() {
        if (dictOrArrayOrData == null) {
            dictOrArrayOrData = new ArrayList<Object>();
        }
        return this.dictOrArrayOrData;
    }

    public void addKeyAndValue(String key, Integer value) {
    	if (value != null) {
	    	JAXBElement<String> keyElement = new JAXBElement<String>(new QName("key"), String.class, key);
	    	JAXBElement<BigInteger> valueElement = new JAXBElement<BigInteger>(new QName("integer"), BigInteger.class, BigInteger.valueOf(value));
	    	getDictOrArrayOrData().add(keyElement);
	    	dictOrArrayOrData.add(valueElement);
    	}
    }

    public void addKeyAndValue(String key, BigInteger value) {
    	if (value != null) {
	    	JAXBElement<String> keyElement = new JAXBElement<String>(new QName("key"), String.class, key);
	    	JAXBElement<BigInteger> valueElement = new JAXBElement<BigInteger>(new QName("integer"), BigInteger.class, value);
	    	getDictOrArrayOrData().add(keyElement);
	    	dictOrArrayOrData.add(valueElement);
    	}
    }

    public void addKeyAndValue(String key, String value) {
    	if (value != null) {
	    	JAXBElement<String> keyElement = new JAXBElement<String>(new QName("key"), String.class, key);
	    	JAXBElement<String> valueElement = new JAXBElement<String>(new QName("string"), String.class, value);
	    	getDictOrArrayOrData().add(keyElement);
	    	dictOrArrayOrData.add(valueElement);
    	}
    }
    
    public void addKeyAndValue(String key, Boolean value) {
    	if (value != null) {
	    	JAXBElement<String> keyElement = new JAXBElement<String>(new QName("key"), String.class, key);
	    	getDictOrArrayOrData().add(keyElement);
	    	dictOrArrayOrData.add(value ? new True() : new False());
    	}
    }
    
    public void addKeyAndValue(String key, Date value, DateFormat dateFormat) {
    	if (value != null) {
	    	JAXBElement<String> keyElement = new JAXBElement<String>(new QName("key"), String.class, key);
	    	JAXBElement<String> valueElement = new JAXBElement<String>(new QName("date"), String.class, dateFormat.format(value));
	    	getDictOrArrayOrData().add(keyElement);
	    	dictOrArrayOrData.add(valueElement);
    	}
    }
    
    public void addKeyAndValue(String key, Dict value) {
    	JAXBElement<String> keyElement = new JAXBElement<String>(new QName("key"), String.class, key);
    	getDictOrArrayOrData().add(keyElement);
    	dictOrArrayOrData.add(value);
    }

    public void addKeyAndValue(String key, Array value) {
    	JAXBElement<String> keyElement = new JAXBElement<String>(new QName("key"), String.class, key);
    	getDictOrArrayOrData().add(keyElement);
    	dictOrArrayOrData.add(value);
    }


    public void addKeyAndValue(String key, byte[] value) {
    	JAXBElement<String> keyElement = new JAXBElement<String>(new QName("key"), String.class, key);
    	getDictOrArrayOrData().add(keyElement);
    	JAXBElement<byte[]> valueElement = new JAXBElement<byte[]>(new QName("data"), byte[].class, value);
    	dictOrArrayOrData.add(valueElement);
    }

	public boolean equals(Object obj) {
	    if (obj == this) {
	        return true;
	    }
	    if (obj == null || obj.getClass() != this.getClass()) {
	        return false;
	    }
	    Dict d = (Dict) obj;
	    if (this.getDictOrArrayOrData() == null && d.getDictOrArrayOrData() != null)
	    	return false;
	    if (this.getDictOrArrayOrData() != null && d.getDictOrArrayOrData() != null) {
	    	if (this.getDictOrArrayOrData().size() != d.getDictOrArrayOrData().size())
	    		return false;
	    	Iterator<Object> iter = d.getDictOrArrayOrData().iterator();
	    	for (Object o1 : this.getDictOrArrayOrData()) {
	    		Object o2 = iter.next();
	    		if (o1 instanceof JAXBElement && o2 instanceof JAXBElement) {
	    			JAXBElement<?> j1 = (JAXBElement<?>) o1;
	    			JAXBElement<?> j2 = (JAXBElement<?>) o2;
	    			if (j1.getName().equals(j2.getName()) && j1.getValue() instanceof byte[] && j2.getValue() instanceof byte[]){
	    				if (!Arrays.equals((byte[])j1.getValue(), (byte[])j2.getValue()))
	    					return false;
	    			}
	    			else if (!j1.getName().equals(j2.getName()) || !j1.getValue().equals(j2.getValue())){
	    				return false;
	    			}
	    		}
	    		else if (!o1.equals(o2))
	    			return false;
	    	}
	    }
	    return true;
	}
}
